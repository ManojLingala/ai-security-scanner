using System;
using System.ComponentModel.DataAnnotations;
using AISecurityScanner.Domain.Enums;

namespace AISecurityScanner.Domain.Entities
{
    public class PackageVulnerability : BaseEntity
    {
        [Required]
        public Guid SecurityScanId { get; set; }
        
        [Required]
        [MaxLength(200)]
        public string PackageName { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(50)]
        public string Version { get; set; } = string.Empty;
        
        [Required]
        [MaxLength(50)]
        public string PackageManager { get; set; } = string.Empty; // NuGet, npm, pip, etc.
        
        [MaxLength(50)]
        public string? LatestVersion { get; set; }
        
        [MaxLength(50)]
        public string? RecommendedVersion { get; set; }
        
        public bool IsOutdated { get; set; }
        
        public bool HasKnownVulnerabilities { get; set; }
        
        [MaxLength(100)]
        public string? CVE { get; set; } // Common Vulnerabilities and Exposures ID
        
        [MaxLength(20)]
        public string? CVSS { get; set; } // Common Vulnerability Scoring System score
        
        public VulnerabilitySeverity Severity { get; set; }
        
        [MaxLength(2000)]
        public string? Description { get; set; }
        
        [MaxLength(500)]
        public string? AdvisoryUrl { get; set; }
        
        [MaxLength(200)]
        public string? FilePath { get; set; } // package.json, *.csproj, requirements.txt, etc.
        
        public DateTime? PublishedDate { get; set; }
        
        public DateTime? DisclosedDate { get; set; }
        
        public bool IsDirectDependency { get; set; }
        
        [MaxLength(500)]
        public string? DependencyPath { get; set; } // For transitive dependencies
        
        public int? LicenseRisk { get; set; } // 0-10 scale for license compatibility issues
        
        [MaxLength(100)]
        public string? License { get; set; }
        
        // AI Hallucination Detection
        public bool IsPotentiallyHallucinated { get; set; }
        
        public decimal HallucinationConfidence { get; set; } // 0-1 confidence score
        
        [MaxLength(1000)]
        public string? HallucinationReason { get; set; }
        
        public bool PackageExists { get; set; }
        
        public DateTime? LastCheckedAt { get; set; }
        
        // Navigation properties
        public virtual SecurityScan SecurityScan { get; set; } = null!;
    }
}