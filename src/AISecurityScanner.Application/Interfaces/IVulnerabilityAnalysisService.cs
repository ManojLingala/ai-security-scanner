using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using AISecurityScanner.Application.DTOs;
using AISecurityScanner.Application.Models;
using AISecurityScanner.Domain.Enums;

namespace AISecurityScanner.Application.Interfaces
{
    public interface IVulnerabilityAnalysisService
    {
        Task<PagedResult<VulnerabilityDto>> GetVulnerabilitiesAsync(Guid organizationId, VulnerabilityFilter filter, PaginationRequest pagination, CancellationToken cancellationToken = default);
        Task<VulnerabilityDto?> GetVulnerabilityAsync(Guid vulnerabilityId, CancellationToken cancellationToken = default);
        Task<bool> UpdateVulnerabilityStatusAsync(Guid vulnerabilityId, VulnerabilityStatus status, Guid userId, string? reason = null, CancellationToken cancellationToken = default);
        Task<bool> MarkAsFalsePositiveAsync(Guid vulnerabilityId, Guid userId, string reason, CancellationToken cancellationToken = default);
        Task<VulnerabilityTrendData> GetVulnerabilityTrendsAsync(Guid organizationId, DateTime from, DateTime to, CancellationToken cancellationToken = default);
        Task<VulnerabilitySummary> GetVulnerabilitySummaryAsync(Guid organizationId, CancellationToken cancellationToken = default);
        Task<List<VulnerabilityDto>> GetSimilarVulnerabilitiesAsync(Guid vulnerabilityId, CancellationToken cancellationToken = default);
        Task<ComplianceReport> GenerateComplianceReportAsync(Guid organizationId, ComplianceStandard standard, CancellationToken cancellationToken = default);
    }

    public class VulnerabilityFilter
    {
        public VulnerabilitySeverity? Severity { get; set; }
        public VulnerabilityStatus? Status { get; set; }
        public bool? IsAIGenerated { get; set; }
        public string? Type { get; set; }
        public Guid? RepositoryId { get; set; }
        public DateTime? FromDate { get; set; }
        public DateTime? ToDate { get; set; }
        public string? SearchTerm { get; set; }
    }

    public class VulnerabilityTrendData
    {
        public Dictionary<DateTime, int> VulnerabilitiesByDate { get; set; } = new();
        public Dictionary<VulnerabilitySeverity, int> VulnerabilitiesBySeverity { get; set; } = new();
        public Dictionary<string, int> VulnerabilitiesByType { get; set; } = new();
        public decimal TrendPercentage { get; set; }
        public bool IsIncreasing { get; set; }
    }

    public class VulnerabilitySummary
    {
        public int TotalVulnerabilities { get; set; }
        public int OpenVulnerabilities { get; set; }
        public int ResolvedVulnerabilities { get; set; }
        public int FalsePositives { get; set; }
        public Dictionary<VulnerabilitySeverity, int> BySeverity { get; set; } = new();
        public Dictionary<string, int> ByType { get; set; } = new();
        public int AIGeneratedVulnerabilities { get; set; }
        public decimal AIVulnerabilityPercentage { get; set; }
    }

    public class ComplianceReport
    {
        public ComplianceStandard Standard { get; set; }
        public decimal ComplianceScore { get; set; }
        public List<ComplianceItem> Items { get; set; } = new();
        public DateTime GeneratedAt { get; set; }
    }

    public class ComplianceItem
    {
        public string Requirement { get; set; } = string.Empty;
        public bool IsCompliant { get; set; }
        public List<VulnerabilityDto> RelatedVulnerabilities { get; set; } = new();
        public string? Recommendation { get; set; }
    }

    public enum ComplianceStandard
    {
        OWASP,
        CWE,
        NIST,
        ISO27001,
        SOC2
    }
}