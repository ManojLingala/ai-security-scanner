using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using AISecurityScanner.Domain.Enums;
using AISecurityScanner.Domain.ValueObjects;
using AISecurityScanner.Infrastructure.AIProviders;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Moq;
using Xunit;

namespace AISecurityScanner.Infrastructure.Tests
{
    public class MLVulnerabilityProviderTests
    {
        private readonly Mock<ILogger<MLVulnerabilityProvider>> _mockLogger;
        private readonly Mock<IConfiguration> _mockConfiguration;
        private readonly HttpClient _httpClient;
        private readonly MLVulnerabilityProvider _provider;

        public MLVulnerabilityProviderTests()
        {
            _mockLogger = new Mock<ILogger<MLVulnerabilityProvider>>();
            _mockConfiguration = new Mock<IConfiguration>();
            _httpClient = new HttpClient();
            _provider = new MLVulnerabilityProvider(_httpClient, _mockLogger.Object, _mockConfiguration.Object);
        }

        [Fact]
        public void Provider_Properties_AreCorrectlySet()
        {
            // Assert
            Assert.Equal("ML-VulnerabilityDetector", _provider.Name);
            Assert.Equal(0.001m, _provider.CostPerRequest);
            Assert.True(_provider.SupportsCodeAnalysis);
            Assert.True(_provider.SupportsPackageValidation);
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithSQLInjectionCode_DetectsVulnerability()
        {
            // Arrange
            var maliciousCode = @"
                string userId = Request.QueryString[""userId""];
                string sql = ""SELECT * FROM users WHERE id = "" + userId;
                SqlCommand cmd = new SqlCommand(sql, connection);
                cmd.ExecuteQuery();
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(maliciousCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotEmpty(result.DetectedVulnerabilities);
            Assert.Contains(result.DetectedVulnerabilities, v => v.Type.Contains("SQL Injection"));
            Assert.True(result.DetectedVulnerabilities[0].Confidence > 0.3m);
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithXSSCode_DetectsVulnerability()
        {
            // Arrange
            var maliciousCode = @"
                string userInput = Request.Form[""message""];
                Response.Write(""<div>"" + userInput + ""</div>"");
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(maliciousCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotEmpty(result.DetectedVulnerabilities);
            Assert.Contains(result.DetectedVulnerabilities, v => v.Type.Contains("XSS") || v.Type.Contains("Cross-Site"));
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithHardcodedCredentials_DetectsVulnerability()
        {
            // Arrange
            var maliciousCode = @"
                string password = ""Admin123!"";
                string apiKey = ""sk-1234567890abcdefghijklmnopqrstuvwxyz"";
                var connection = new SqlConnection(""Server=.;Database=Test;User=sa;Password=Admin123!"");
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(maliciousCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotEmpty(result.DetectedVulnerabilities);
            Assert.Contains(result.DetectedVulnerabilities, v => v.Type.Contains("Hardcoded"));
            Assert.Contains(result.DetectedVulnerabilities, v => v.Severity == VulnerabilitySeverity.Critical);
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithCommandInjection_DetectsVulnerability()
        {
            // Arrange
            var maliciousCode = @"
                string userInput = Request.QueryString[""filename""];
                Process.Start(""cmd.exe"", ""/c del "" + userInput);
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(maliciousCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotEmpty(result.DetectedVulnerabilities);
            Assert.Contains(result.DetectedVulnerabilities, v => v.Type.Contains("Command"));
            Assert.Contains(result.DetectedVulnerabilities, v => v.Severity == VulnerabilitySeverity.Critical);
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithPathTraversal_DetectsVulnerability()
        {
            // Arrange
            var maliciousCode = @"
                string filename = Request.QueryString[""file""];
                string content = File.ReadAllText(""uploads/"" + filename);
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(maliciousCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotEmpty(result.DetectedVulnerabilities);
            Assert.Contains(result.DetectedVulnerabilities, v => v.Type.Contains("Path"));
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithSafeCode_DetectsNoVulnerabilities()
        {
            // Arrange
            var safeCode = @"
                public class UserService
                {
                    public User GetUser(int userId)
                    {
                        using var command = new SqlCommand(""SELECT * FROM Users WHERE Id = @userId"", connection);
                        command.Parameters.AddWithValue(""@userId"", userId);
                        return command.ExecuteQuery();
                    }
                }
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(safeCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.Empty(result.DetectedVulnerabilities);
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithCommentedVulnerabilityCode_HasLowerConfidence()
        {
            // Arrange
            var commentedCode = @"
                // string sql = ""SELECT * FROM users WHERE id = "" + userId;
                // This is just an example of what NOT to do
                string safeSql = ""SELECT * FROM users WHERE id = @userId"";
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(commentedCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            if (result.DetectedVulnerabilities.Any())
            {
                // If any vulnerabilities are detected in comments, confidence should be very low
                Assert.All(result.DetectedVulnerabilities, v => Assert.True(v.Confidence < 0.2m));
            }
        }

        [Fact]
        public async Task ValidatePackagesAsync_WithSuspiciousPackageName_DetectsIssue()
        {
            // Arrange
            var suspiciousPackages = new List<string>
            {
                "test-package-123",
                "demo-lib-temp",
                "fake-module-ai"
            };

            // Act
            var result = await _provider.ValidatePackagesAsync(suspiciousPackages, "npm");

            // Assert
            Assert.True(result.IsSuccess);
            Assert.True(result.VulnerablePackageCount > 0);
            Assert.Contains(result.VulnerablePackages, p => p.HasVulnerabilities);
        }

        [Fact]
        public async Task ValidatePackagesAsync_WithLegitimatePackages_DetectsNoIssues()
        {
            // Arrange
            var legitimatePackages = new List<string>
            {
                "react",
                "lodash",
                "express"
            };

            // Act
            var result = await _provider.ValidatePackagesAsync(legitimatePackages, "npm");

            // Assert
            Assert.True(result.IsSuccess);
            Assert.Equal(0, result.VulnerablePackageCount);
        }

        [Fact]
        public async Task IsHealthyAsync_ReturnsTrue()
        {
            // Act
            var isHealthy = await _provider.IsHealthyAsync();

            // Assert
            Assert.True(isHealthy);
        }

        [Fact]
        public async Task GetHealthStatusAsync_ReturnsValidStatus()
        {
            // Act
            var status = await _provider.GetHealthStatusAsync();

            // Assert
            Assert.True(status.IsHealthy);
            Assert.True(status.ResponseTime > TimeSpan.Zero);
            Assert.True(status.SuccessRate > 0);
            Assert.Null(status.ErrorMessage);
        }

        [Theory]
        [InlineData("javascript")]
        [InlineData("python")]
        [InlineData("java")]
        public async Task AnalyzeCodeAsync_WithDifferentLanguages_UsesGeneralPatterns(string language)
        {
            // Arrange
            var testCode = "// TODO: implement this function properly";
            var context = new AIAnalysisContext
            {
                Language = language,
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(testCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            // General patterns should still work for any language
        }

        [Fact]
        public async Task AnalyzeCodeAsync_WithLargeCodebase_CompletesSuccessfully()
        {
            // Arrange
            var largeCode = string.Join("\n", Enumerable.Repeat("public void SafeMethod() { }", 1000));
            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid()
            };

            // Act
            var result = await _provider.AnalyzeCodeAsync(largeCode, context);

            // Assert
            Assert.True(result.IsSuccess);
            Assert.NotNull(result.AnalysisMetadata);
            Assert.Contains("LinesAnalyzed", result.AnalysisMetadata.Keys);
        }

        public void Dispose()
        {
            _httpClient?.Dispose();
        }
    }
}