using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using AISecurityScanner.Domain.ValueObjects;
using AISecurityScanner.Infrastructure.AIProviders;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace AISecurityScanner.Examples
{
    /// <summary>
    /// Example demonstrating how to use the ML-based vulnerability detection system
    /// </summary>
    public class MLVulnerabilityDetectionExample
    {
        private readonly MLVulnerabilityProvider _mlProvider;
        private readonly HybridMLVulnerabilityProvider _hybridProvider;
        private readonly ILogger<MLVulnerabilityDetectionExample> _logger;

        public MLVulnerabilityDetectionExample(
            ILogger<MLVulnerabilityDetectionExample> logger,
            IConfiguration configuration)
        {
            _logger = logger;
            var httpClient = new HttpClient();
            
            // Initialize ML providers
            _mlProvider = new MLVulnerabilityProvider(
                httpClient, 
                logger.CreateLogger<MLVulnerabilityProvider>(), 
                configuration);
                
            _hybridProvider = new HybridMLVulnerabilityProvider(
                httpClient,
                logger.CreateLogger<HybridMLVulnerabilityProvider>(),
                configuration,
                _mlProvider);
        }

        /// <summary>
        /// Demonstrates basic vulnerability detection on various code samples
        /// </summary>
        public async Task RunBasicDetectionExamples()
        {
            _logger.LogInformation("Starting ML Vulnerability Detection Examples");

            var testCases = GetVulnerableCodeSamples();
            
            foreach (var testCase in testCases)
            {
                _logger.LogInformation("Testing: {Description}", testCase.Description);
                
                var context = new AIAnalysisContext
                {
                    Language = "csharp",
                    OrganizationId = Guid.NewGuid(),
                    IncludeAIDetection = true
                };

                // Test with local ML provider
                var result = await _mlProvider.AnalyzeCodeAsync(testCase.Code, context);
                
                _logger.LogInformation("Found {Count} vulnerabilities with confidence scores:", 
                    result.DetectedVulnerabilities.Count);
                
                foreach (var vuln in result.DetectedVulnerabilities)
                {
                    _logger.LogInformation("  - {Type} (Line {Line}): {Confidence:P} confidence", 
                        vuln.Type, vuln.LineNumber, vuln.Confidence);
                    _logger.LogInformation("    CWE-{CweId}: {Description}", 
                        vuln.CweId, vuln.Description);
                    _logger.LogInformation("    Recommendation: {Recommendation}", 
                        vuln.Recommendation);
                }
                
                Console.WriteLine();
            }
        }

        /// <summary>
        /// Demonstrates hybrid ML detection using multiple providers
        /// </summary>
        public async Task RunHybridDetectionExample()
        {
            _logger.LogInformation("Starting Hybrid ML Detection Example");

            var vulnerableCode = @"
                public class UserController : Controller
                {
                    public ActionResult GetUser(string userId)
                    {
                        // Multiple vulnerabilities in one method
                        string sql = ""SELECT * FROM Users WHERE Id = "" + userId;  // SQL Injection
                        string apiKey = ""sk-1234567890abcdef"";                     // Hardcoded secret
                        
                        var command = new SqlCommand(sql, connection);
                        var result = command.ExecuteQuery();
                        
                        Response.Write(""User: "" + result.ToString());             // XSS vulnerability
                        
                        return View(result);
                    }
                    
                    public ActionResult DeleteFile(string filename)
                    {
                        string filePath = ""uploads/"" + filename;                  // Path traversal
                        File.Delete(filePath);
                        
                        Process.Start(""cmd.exe"", ""/c echo Deleted "" + filename); // Command injection
                        
                        return Json(new { success = true });
                    }
                }
            ";

            var context = new AIAnalysisContext
            {
                Language = "csharp",
                OrganizationId = Guid.NewGuid(),
                IncludeAIDetection = true
            };

            // Use hybrid provider for enhanced detection
            var hybridResult = await _hybridProvider.AnalyzeCodeAsync(vulnerableCode, context);
            
            _logger.LogInformation("Hybrid Analysis Results:");
            _logger.LogInformation("Provider: {Provider}", hybridResult.ProviderName);
            _logger.LogInformation("ML Model: {Model}", hybridResult.MLModelUsed);
            _logger.LogInformation("Overall Confidence: {Confidence:P}", hybridResult.ConfidenceScore);
            _logger.LogInformation("Analysis Cost: ${Cost:F4}", hybridResult.Cost);
            _logger.LogInformation("Response Time: {Time}ms", hybridResult.ResponseTime.TotalMilliseconds);

            _logger.LogInformation("\nDetected Vulnerabilities:");
            foreach (var vuln in hybridResult.DetectedVulnerabilities.OrderBy(v => v.LineNumber))
            {
                _logger.LogInformation("\n{Severity} - {Type} (Line {Line})", 
                    vuln.Severity, vuln.Type, vuln.LineNumber);
                _logger.LogInformation("  Confidence: {Confidence:P}", vuln.Confidence);
                _logger.LogInformation("  Code: {Code}", vuln.Code.Trim());
                _logger.LogInformation("  CWE-{CweId}: {Description}", vuln.CweId, vuln.Description);
                _logger.LogInformation("  Fix: {Recommendation}", vuln.Recommendation);
            }

            // Display analysis metadata
            if (hybridResult.AnalysisMetadata.Any())
            {
                _logger.LogInformation("\nAnalysis Metadata:");
                foreach (var metadata in hybridResult.AnalysisMetadata)
                {
                    _logger.LogInformation("  {Key}: {Value}", metadata.Key, metadata.Value);
                }
            }
        }

        /// <summary>
        /// Demonstrates package vulnerability detection
        /// </summary>
        public async Task RunPackageDetectionExample()
        {
            _logger.LogInformation("Starting Package Vulnerability Detection Example");

            var suspiciousPackages = new List<string>
            {
                "react",                    // Legitimate package
                "test-package-123",         // Suspicious pattern
                "demo-ai-lib-temp",         // AI-generated looking
                "lodash",                   // Legitimate package
                "fake-crypto-module",       // Suspicious name
                "express"                   // Legitimate package
            };

            var result = await _hybridProvider.ValidatePackagesAsync(suspiciousPackages, "npm");
            
            _logger.LogInformation("Package Validation Results:");
            _logger.LogInformation("Total packages scanned: {Total}", result.TotalPackagesScanned);
            _logger.LogInformation("Vulnerable packages found: {Count}", result.VulnerablePackageCount);
            _logger.LogInformation("Analysis cost: ${Cost:F4}", result.Cost);

            foreach (var package in result.VulnerablePackages.Where(p => p.HasVulnerabilities))
            {
                _logger.LogInformation("\nSuspicious Package: {Name} ({Ecosystem})", 
                    package.PackageName, package.Ecosystem);
                
                foreach (var vuln in package.Vulnerabilities)
                {
                    _logger.LogInformation("  - {Severity}: {Description} (Confidence: {Confidence:P})", 
                        vuln.Severity, vuln.Description, vuln.Confidence);
                }
            }
        }

        /// <summary>
        /// Demonstrates performance testing with various code sizes
        /// </summary>
        public async Task RunPerformanceTest()
        {
            _logger.LogInformation("Starting Performance Test");

            var codeSizes = new[] { 100, 500, 1000, 5000 };
            
            foreach (var size in codeSizes)
            {
                var testCode = GenerateTestCode(size);
                var context = new AIAnalysisContext
                {
                    Language = "csharp",
                    OrganizationId = Guid.NewGuid()
                };

                var startTime = DateTime.UtcNow;
                var result = await _mlProvider.AnalyzeCodeAsync(testCode, context);
                var elapsed = DateTime.UtcNow - startTime;

                _logger.LogInformation("Code size: {Size} lines", size);
                _logger.LogInformation("  Analysis time: {Time}ms", elapsed.TotalMilliseconds);
                _logger.LogInformation("  Vulnerabilities found: {Count}", result.DetectedVulnerabilities.Count);
                _logger.LogInformation("  Lines analyzed: {Lines}", 
                    result.AnalysisMetadata.GetValueOrDefault("LinesAnalyzed", 0));
            }
        }

        private List<VulnerableCodeSample> GetVulnerableCodeSamples()
        {
            return new List<VulnerableCodeSample>
            {
                new VulnerableCodeSample
                {
                    Description = "SQL Injection via String Concatenation",
                    Code = @"string sql = ""SELECT * FROM users WHERE id = "" + Request.QueryString[""id""];"
                },
                new VulnerableCodeSample
                {
                    Description = "Cross-Site Scripting (XSS)",
                    Code = @"Response.Write(""<h1>Welcome "" + Request.Form[""username""] + ""!</h1>"");"
                },
                new VulnerableCodeSample
                {
                    Description = "Command Injection",
                    Code = @"Process.Start(""ping"", userInput);"
                },
                new VulnerableCodeSample
                {
                    Description = "Path Traversal",
                    Code = @"File.ReadAllText(""files/"" + Request.QueryString[""file""]);"
                },
                new VulnerableCodeSample
                {
                    Description = "Hardcoded API Key",
                    Code = @"string apiKey = ""sk-1234567890abcdefghijklmnopqrstuvwxyz"";"
                },
                new VulnerableCodeSample
                {
                    Description = "Insecure Deserialization",
                    Code = @"var formatter = new BinaryFormatter(); var obj = formatter.Deserialize(stream);"
                },
                new VulnerableCodeSample
                {
                    Description = "AI-Generated Placeholder Code",
                    Code = @"// TODO: implement proper authentication logic here"
                }
            };
        }

        private string GenerateTestCode(int lines)
        {
            var codeLines = new List<string>();
            var random = new Random();
            
            for (int i = 0; i < lines; i++)
            {
                if (i % 50 == 0 && i > 0)
                {
                    // Add a vulnerability every 50 lines for testing
                    codeLines.Add($@"string sql{i} = ""SELECT * FROM table WHERE id = "" + userInput;");
                }
                else
                {
                    codeLines.Add($"public void Method{i}() {{ var x = {random.Next(1000)}; }}");
                }
            }
            
            return string.Join("\n", codeLines);
        }

        public class VulnerableCodeSample
        {
            public string Description { get; set; } = string.Empty;
            public string Code { get; set; } = string.Empty;
        }
    }
}